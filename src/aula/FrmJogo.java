/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aula;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author glauc
 */
public class FrmJogo
        extends javax.swing.JFrame
        implements Runnable {

    //Atributos
    private int lives = 5;
    private int fallSpeed;
    private int points;
    private int ball;
    private boolean left;
    private boolean right;
    private boolean fimJogo;
    private boolean keyRestart;
    private boolean tiro;
    private long ultimoTiro;
    private Raquete player;
    private long ultimaBola;
    private Live[] live;
    //lista de Objetos dentro do campo
    ArrayList<Base> lista = new ArrayList();
    //lista de Objetos que vao para lixo
    ArrayList<Base> lixo = new ArrayList();

    //Formulario do jogo
    public FrmJogo() {
        initComponents();
        createBufferStrategy(2);
        Thread t = new Thread(this);
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelPainel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JOGO DE BRICK BREAKER");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jPanelPainel.setBackground(new java.awt.Color(204, 255, 204));
        jPanelPainel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanelPainelLayout = new javax.swing.GroupLayout(jPanelPainel);
        jPanelPainel.setLayout(jPanelPainelLayout);
        jPanelPainelLayout.setHorizontalGroup(
            jPanelPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 425, Short.MAX_VALUE)
        );
        jPanelPainelLayout.setVerticalGroup(
            jPanelPainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 299, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelPainel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelPainel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    //Teclado precionado
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            tiro = true;
        }

    }//GEN-LAST:event_formKeyPressed
    //Teclado nao precionado
    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            left = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            right = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            keyRestart = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            tiro = false;
        }

    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //Criar e mostrar formulario do jogo
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new FrmJogo().setVisible(true);
            }
        });
    }

    @Override
    public void run() {
        //atributos
        Graphics g;
        int points = 0;
        int level = 1;
        player = initPlayer();
        ball = 50;
        int levelBalls = ball;
        fimJogo = false;
        fallSpeed = 500;
        live = initLives();

        //Mover Live para lixo
        for (int x = 0; x < lives; x++) {
            lista.add(live[x]);
        }
        while (true) {
            if (!fimJogo) {
                player.setY(getHeight() - player.getAltura());
                g = getBufferStrategy().getDrawGraphics();
                //Limpa a tela
                g.setColor(Color.GREEN);
                g.fillRect(0, 0, getWidth(), getHeight());
                g.setColor(Color.BLACK);
                g.drawString(Integer.toString(ball), 100, 100);
                g.drawString("points: " + Integer.toString(points), getWidth() - 100, getHeight() - 30);

                //FAzer cair as bolas
                if (ultimaBola + (fallSpeed / level) < System.currentTimeMillis() && ball > 0) {
                    ball--;
                    ultimaBola = System.currentTimeMillis();
                    lista.add(createBall());
                }
                //Colisao Player com BolaWIDTH
                for (Base b : lista) {
                    if (player.colisao(b) && b.getClass() == Bola.class) {
                        b.setIncY(-1);
                    }
                }
                for (Base b : lista) {
                    b.mover();
                    b.desenhar(g);
                }

                //Chamada de funçoes
                checkFire();
                checkBallFire();

                //Eliminar as Bolas quando o tiro atingilas
                for (Base b : lista) {
                    for (Base c : lista) {
                        if (b.getClass() == Tiro.class && c.getClass() == Bola.class && b.colisao(c)) {
                            lixo.add(c);
                            points++;
                        }
                    }
                }
                //Limpar Lixo
                lista.removeAll(lixo);
                lixo.clear();
                //Parar as bolas quando o jogo terminar
                if (fimJogo) {
                    for (Base b : lista) {
                        b.setIncX(0);
                        b.setIncY(0);
                    }
                }

                //Mudança de Nivel
                if (ball == 0) {
                    g.setColor(Color.BLACK);
                    g.drawString("GANHOU O NIVEL: " + Integer.toString(level) + " - Tecle R para nivel seguinte", 80, 165);
                    level++;

                    levelBalls = levelBalls * 2;
                    fimJogo = true;
                }
                //Perder
                if (lives == 0) {
                    g.setColor(Color.BLACK);
                    g.drawString("PERDEU NO NIVEL: " + Integer.toString(level) + " PONTO TOTAL:" + points + " - Tecle R para Reiniciar", 60, 165);
                    //renicia as variaveis
                    level = 1;
                    points = 0;
                    lives = 5;
                    levelBalls = 50;
                    fimJogo = true;
                    //Limpa Campo de formulario
                    for (Base b : lista) {
                        if (b.getClass() == Bola.class) {
                            lixo.add(b);
                        }
                    }

                }
                //Colisao da Raquete com a parede
                if (left && player.getX() > 0) {
                    player.setIncX(-5);
                } else {
                    if (right && player.getX() + player.largura < getWidth()) {
                        player.setIncX(5);
                    } else {
                        player.setIncX(0);
                    }
                }
                g.dispose();
                getBufferStrategy().show();
            }
            //Reinicia o Jogo
            if (fimJogo && keyRestart) {
                int initBalls = 4;
                ballCreation(initBalls);
                fimJogo = false;
                ball = levelBalls;
                live = initLives();
                for (int x = 0; x < lives; x++) {
                    lista.add(live[x]);
                }
            }
            try {
                Thread.sleep(5);
            } catch (InterruptedException ex) {
            }
        }
    }

    //Criar Bola
    private void ballCreation(int balls) {
        for (int i = 0; i < balls; i++) {

            lista.add(createBall());
        }
    }

    private Bola createBall() {
        Random r = new Random();

        Bola b = new Bola("img/bola.png");
        b.setX(r.nextInt(getWidth()));
        b.setY(10);
        int red = r.nextInt(255);
        int green = r.nextInt(255);
        int blue = r.nextInt(255);
        b.setCor(new Color(red, green, blue));

        return b;

    }

    //Crear Raquete
    private Raquete initPlayer() {
        Raquete player = new Raquete();
        player.setLargura(80);
        player.setAltura(30);
        player.setIncY(0);
        player.setIncX(0);
        player.setY(getHeight() - player.getAltura());
        lista.add(player);
        return player;
    }

    // conprovar o disparo.
    private void checkFire() {
        long tempo = System.currentTimeMillis();

        if (tiro && tempo > ultimoTiro + 200) {
            ultimoTiro = tempo;
            Tiro t = new Tiro();
            t.setIncX(0);
            t.setIncY(-2);
            t.setX(player.getX() + player.getAltura() - 3);
            t.y = player.y - 2;
            t.setAltura(4);
            t.setLargura(2);
            lista.add(t);
        }
    }

    //Eliminar a Bola a ser atingida pelo disparo.
    private void checkBallFire() {
        for (Base b : lista) {
            Colisao aux = b.trataColisao(getWidth(), getHeight());
            if (aux == Colisao.DOWN) {
                lixo.add(b);
                lixo.add(live[lives - 1]);
                if (lives > 0) {
                    lives--;
                }
            }
            if (b.getClass() == Tiro.class && aux == Colisao.UP) {
                lixo.add(b);
            }
        }
    }
        //Cria Vida
    private Live[] initLives() {
        int xDistance = 25;
        Random r = new Random();
        Live[] l = new Live[lives];
        for (int x = 0; x < lives; x++) {
            l[x] = new Live("img/like.png");
            l[x].setX(30 + (x * xDistance));
            l[x].setY(getHeight() - 70);
            l[x].setIncX(0);
            l[x].setIncY(0);
            int red = r.nextInt(255);
            int green = r.nextInt(255);
            int blue = r.nextInt(255);
            l[x].setCor(new Color(red, green, blue));

        }

        return l;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelPainel;
    // End of variables declaration//GEN-END:variables
}
